################## Create container, cluster ##################
- name: create couch directory
  become: yes
  file:
    path: "{{ couch_dir }}"
    recurse: yes
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: "Copy local.ini to /root/couchdb"
  become: yes
  template:
    src: local.ini.j2
    dest:  "{{ couch_dir }}/local.ini"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"


- name: create containers
  become: yes
  docker_container:
    name: couchdbnode
    ports:
      - "5984:5984"
      - "5986:5986"
      - "4369:4369"
      - "9100-9200:9100-9200"
    mounts:
      - source: "{{ couch_data }}"
        target: /opt/couchdb/data
    volumes:
      - "{{ couch_dir }}/local.ini:/opt/couchdb/etc/local.d/local.ini"
    env:
      COUCHDB_USER: "{{ couch_user }}"
      COUCHDB_PASSWORD: "{{ couch_password }}"
      COUCHDB_SECRET: "{{ couch_cookie }}"
      NODENAME: "{{ ansible_host }}"
      ERL_FLAGS: "-setcookie {{ couch_cookie }} -name couchdb@{{ ansible_host }} -kernel inet_dist_listen_min 9100 -kernel inet_dist_listen_max 9200"
    image: "{{ couch_version }}"
# ERL_FLAGS?
# Or build by docker compose?

- name: store master ip address for later clustering
  set_fact:
    master_instance: "{{ groups['instance_1'][0] }}"

- name: wait
  pause:
    seconds: 6


#- name: try access
#  become: yes
#  shell: "curl http://{{ couch_user }}:{{ couch_password }}@localhost:5984/"
#  warn: false

#- name: try access master cluster setup
#  become: yes
#  shell: "curl http://{{ couch_user }}:{{ couch_password }}@localhost:5984/_cluster_setup"
#  when: ansible_host == master_instance

- name: enable cluster 
  become: yes
  # command: 
  uri:
    url: http://{{ couch_user }}:{{ couch_password }}@{{ master_instance }}:5984/_cluster_setup
    status_code: 201
    method: POST
    headers: 
      Content-Type: "application/json"
    url_username: "{{ couch_user }}"
    url_password: "{{ couch_password }}"
    force_basic_auth: yes
    return_content: yes
    body_format: json
    body: "{\"action\": \"enable_cluster\", \"bind_address\":\"0.0.0.0\",\
         \"username\": \"{{ couch_user }}\", \"password\":\"{{ couch_password }}\", \"port\": \"5984\",\
         \"remote_node\": \"{{ ansible_host }}\", \"node_count\": \"{{ groups['All'] | length }}\",\
         \"remote_current_user\":\"{{ couch_user }}\", \"remote_current_password\":\"{{ couch_password }}\"}"
#  loop: "{{ groups['slaves'] }}"
  when: ansible_host != master_instance


- name: add node
  become: yes
  uri:
    url: http://{{ couch_user }}:{{ couch_password }}@{{ master_instance }}:5984/_cluster_setup
    method: POST
    status_code: 409,201
    headers:
      Content-Type: "application/json"
    url_username: "{{ couch_user }}"
    url_password: "{{ couch_password }}"
    force_basic_auth: yes
    body_format: json
    body: "{\"action\": \"add_node\", \"host\":\"{{ ansible_host }}\",\
         \"port\": \"5984\", \"username\": \"{{ couch_user }}\", \"password\":\"{{ couch_password }}\"}"
#  loop: "{{ groups['slaves'] }}"
  when: ansible_host != master_instance

#- name: check
#  shell: curl http://127.0.0.1:5984
#  register: chk

#- debug:
#    var: chk["stdout"]


#- name: double check
#  command: "curl -XGET http://{{ couch_user }}:{{ couch_password }}@{{ ansible_host }}:5984/"
#  register: dchk

#- debug:
#    var: dchk["stdout"]


- name: finish cluster
  become: yes
  uri:
    url: http://{{ couch_user }}:{{ couch_password }}@{{ master_instance }}:5984/_cluster_setup
    method: POST
    status_code: 201,500
    headers:
      Content-Type: "application/json"
    url_username: "{{ couch_user }}"
    url_password: "{{ couch_password }}"
    force_basic_auth: yes
    body_format: json
    body: "{\"action\": \"finish_cluster\"}"
 # loop: "{{ groups['slaves'] }}"
  when: ansible_host == master_instance

- name: finish check
  command: "curl -XGET http://{{ couch_user }}:{{ couch_password }}@{{ ansible_host }}:5984/_membership"
  register: fchk

- debug:
    var: fchk["stdout"]
